ðŸ“Œ PART 1 â€” NumPy Core Basics
1. NumPy Intro

NumPy = Numerical Python

High-performance library for arrays, matrices, and math functions

2. Getting Started

import numpy as np

NumPy uses its own array object: np.array()

3. Creating Arrays

1D: np.array([1,2,3])

2D: np.array([[1,2],[3,4]])

Shape: array.shape

Type: array.dtype

4. Indexing

Access elements by position: arr[0], arr[1][0]

Negative indexing supported

5. Slicing

arr[start:stop]

2D slicing: arr[1:, :2]

6. Data Types

Integers, Floats, Booleans, Strings

Convert type: arr.astype('float')

7. Copy vs View

copy() â†’ independent

view() â†’ shares data with original

8. Shape

Use .shape to check dimensions

Reshape with .reshape() if compatible

9. Reshape

Convert 1D to 2D, etc: arr.reshape(3,2)

ðŸ“Œ PART 2 â€” NumPy Random & Distributions
1. Random Intro

np.random.seed(42) for reproducibility

np.random.randint(start, stop, size)

np.random.rand() â†’ 0 to 1

2. Data Distribution

np.random.normal(mean, std_dev, size)

np.mean() and np.std() to analyze

3. Random Permutation

np.random.permutation(array)

Use for shuffling arrays (e.g., features & labels)

4. Normal Distribution

Bell-curve shape

np.random.normal()

5. Binomial Distribution

Count of successes in trials

np.random.binomial(n, p, size)

6. Poisson Distribution

Events per time interval

np.random.poisson(lam, size)

7. Uniform Distribution

Equal chance for all values

np.random.uniform(low, high, size)

8. Logistic Distribution

Similar to normal, sharper peak

np.random.logistic(loc, scale, size)

9. Exponential Distribution

Time between events

np.random.exponential(scale, size)

ðŸ“Œ PART 3 â€” NumPy Ufuncs (Math Functions)
1. ufunc Intro

Universal functions â†’ operate element-wise

Examples: np.add(), np.multiply(), np.sin()

2. Create ufunc

Use np.frompyfunc(func, num_inputs, num_outputs)

Example: np.frompyfunc(lambda x, y: x + y, 2, 1)

3. Simple Arithmetic

np.add(a, b), np.subtract(), np.multiply(), np.divide()

4. Summations

np.sum(), np.cumsum()

5. Products

np.prod() for product of all elements

6. Differences

np.diff() â†’ first/second order differences

7. LCM

np.lcm(a, b) â†’ least common multiple

Broadcasts with arrays

8. GCD

np.gcd(a, b) â†’ greatest common divisor

Useful for simplifying ratios/fractions

9. Trigonometric Functions

np.sin(), np.cos(), np.tan() (radians)

Convert degrees: np.deg2rad(), np.rad2deg()

Inverse trig: np.arcsin(), etc.

âœ… Additional:
1.Broadcasting: NumPy auto-expands arrays of different shapes

2.2D slicing: arr[1:3, 0:2] â†’ specific rows & columns

3.Use Cases: ML datasets, signal processing, scientific computing